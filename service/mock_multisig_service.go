// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chain4travel/camino-signavault/service (interfaces: MultisigService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	time "time"

	ids "github.com/ava-labs/avalanchego/ids"
	dto "github.com/chain4travel/camino-signavault/dto"
	model "github.com/chain4travel/camino-signavault/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMultisigService is a mock of MultisigService interface.
type MockMultisigService struct {
	ctrl     *gomock.Controller
	recorder *MockMultisigServiceMockRecorder
}

// MockMultisigServiceMockRecorder is the mock recorder for MockMultisigService.
type MockMultisigServiceMockRecorder struct {
	mock *MockMultisigService
}

// NewMockMultisigService creates a new mock instance.
func NewMockMultisigService(ctrl *gomock.Controller) *MockMultisigService {
	mock := &MockMultisigService{ctrl: ctrl}
	mock.recorder = &MockMultisigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultisigService) EXPECT() *MockMultisigServiceMockRecorder {
	return m.recorder
}

// CancelMultisigTx mocks base method.
func (m *MockMultisigService) CancelMultisigTx(arg0 *dto.CancelTxArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMultisigTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelMultisigTx indicates an expected call of CancelMultisigTx.
func (mr *MockMultisigServiceMockRecorder) CancelMultisigTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMultisigTx", reflect.TypeOf((*MockMultisigService)(nil).CancelMultisigTx), arg0)
}

// CreateMultisigTx mocks base method.
func (m *MockMultisigService) CreateMultisigTx(arg0 *dto.MultisigTxArgs) (*model.MultisigTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultisigTx", arg0)
	ret0, _ := ret[0].(*model.MultisigTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultisigTx indicates an expected call of CreateMultisigTx.
func (mr *MockMultisigServiceMockRecorder) CreateMultisigTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultisigTx", reflect.TypeOf((*MockMultisigService)(nil).CreateMultisigTx), arg0)
}

// GetAllMultisigTxForAlias mocks base method.
func (m *MockMultisigService) GetAllMultisigTxForAlias(arg0, arg1, arg2 string) (*[]model.MultisigTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMultisigTxForAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*[]model.MultisigTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMultisigTxForAlias indicates an expected call of GetAllMultisigTxForAlias.
func (mr *MockMultisigServiceMockRecorder) GetAllMultisigTxForAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMultisigTxForAlias", reflect.TypeOf((*MockMultisigService)(nil).GetAllMultisigTxForAlias), arg0, arg1, arg2)
}

// GetMultisigTx mocks base method.
func (m *MockMultisigService) GetMultisigTx(arg0 string) (*model.MultisigTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultisigTx", arg0)
	ret0, _ := ret[0].(*model.MultisigTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultisigTx indicates an expected call of GetMultisigTx.
func (mr *MockMultisigServiceMockRecorder) GetMultisigTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultisigTx", reflect.TypeOf((*MockMultisigService)(nil).GetMultisigTx), arg0)
}

// IssueMultisigTx mocks base method.
func (m *MockMultisigService) IssueMultisigTx(arg0 *dto.IssueTxArgs) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueMultisigTx", arg0)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueMultisigTx indicates an expected call of IssueMultisigTx.
func (mr *MockMultisigServiceMockRecorder) IssueMultisigTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueMultisigTx", reflect.TypeOf((*MockMultisigService)(nil).IssueMultisigTx), arg0)
}

// SignMultisigTx mocks base method.
func (m *MockMultisigService) SignMultisigTx(arg0 string, arg1 *dto.SignTxArgs) (*model.MultisigTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMultisigTx", arg0, arg1)
	ret0, _ := ret[0].(*model.MultisigTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignMultisigTx indicates an expected call of SignMultisigTx.
func (mr *MockMultisigServiceMockRecorder) SignMultisigTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMultisigTx", reflect.TypeOf((*MockMultisigService)(nil).SignMultisigTx), arg0, arg1)
}

// updateExpiredMultisigTx mocks base method.
func (m *MockMultisigService) updateExpiredMultisigTx(arg0 time.Time, arg1 *model.MultisigTx) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateExpiredMultisigTx", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// updateExpiredMultisigTx indicates an expected call of updateExpiredMultisigTx.
func (mr *MockMultisigServiceMockRecorder) updateExpiredMultisigTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateExpiredMultisigTx", reflect.TypeOf((*MockMultisigService)(nil).updateExpiredMultisigTx), arg0, arg1)
}
